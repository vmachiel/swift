{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw12240\paperh15840\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 ViewController: \
Make property to hold the pictures. add code to ditViewLoad: explained there.\
\
Main.Storyboard:\
Delete the standard view and add the UITableViewController using the object lib in the bottom right. (3rd)\
\
Use the identity inspector to link the TableView in ViewController to the class in viewController.swift, and set it as initial viewcontroller \
in the attributes inspector. Make the cell a basic style cell, and give an identifier "Picture" in the attributes inspector. \
\
Embed the whole table view in a navigation controller Editor--> embed in --> navigation controller. This makes it like the settings.app\
This will move the "is initial controller" to the nav controller, but that's ok!\
\
In the viewController: \
how many rows should be shown and what each one should contain. \
\
\
Detail screen for each picture: Make a detail screen in code and draw it on the storyboard.\
Make a new swift file for DetailViewController. At main storyboard find the viewcontroller in the object lib and drag in on screen. Name it "Detail"\
by selecting the viewController and going to the id inspector and going to storyboard ID. Under class select DetailViewController to link it to your code.\
\
This screen needs to display the image: the UIImageView class can be used for this. Search for imageview in the object lib, drag it on to the detail view\
controller, en resize it to fill screen. What image is shown is done in code (depending on what image user pressed) We will use sizeclasses for iPad. \
AutoLayout and contraints for the image in detail view: 4 contraints (one for each side) to make sure the image fills the screen. Do this with editor->\
Resolve auto layout constraint->Reset to current constraints. Now you see a blue line and a contraints tab in the scene to show the constraints are there.\
\
Now link the imageview to the pictures property using the assistant editor. Open the DetailViewController in storyboard and the corresponding swift file\
next to it. Right click drag the into the class code: put it above all the methods and name it imageView\
\
\
Make each detailview screen appear when the user taps on a picture title. In DetailViewController.swift, make an optional String property\
that holds the name of the picture to load. It's optional, because when the view is first created, the name won't exist. \
The DetailView as an id of "Detail" which allows us to load it in code using instantiateViewController(withIdentifier:). Each view has a optional\
called storyboard which may or may not contain the storyboard it was loaded from. Both View and Detail are placed an thus loaded in the\
main.storyboard. So the override tableview with didSelectRowAt code for details on how to load the detailview. It will run each time a \
user selects a certain row. \
The navigation controller is a stack of screens you navigate through. It creates and destroys views when necessary. \
\
Finally in the DetailViewController code, make it actually show the picture using the UIImage class (see code)\
\
\
Final cleanup:\
Pictures are stretched to fill the screen when the are loaded. We don't want that: Storyboard: select the image view and go to the\
attri inspector. Make scale to fit into aspect fit. Scale stretches, aspect fit fits the picture and cuts nothing off, aspect fill fills the screen\
and may cut off either horizontal or vertical parts of the picture. \
\
Next, make the picture go fullscreen when tapping on it. Do this in detailview, and make sure it's undone when going back to the table\
with picture names, or stuff will go wrong. Views have methods: viewWillAppear() (about to be shown), viewDidAppear() (has been\
shown), viewWillDisappear() (will go away), viewDidDisappear() (has gone away). Use viewWillAppear() and viewWillDisappear() to\
make sure the tab to hide menu bar is enabled and than disabled when the DetailView is loaded. \
\
Make the grey arrows appear on the each table cell so users will know to tap. In the table view in the main ViewController, go to Picture. \
This is the ID we set to use in code. Give it an accessory of Disclosure indicator in the attri inspector.\
\
Finally titles for each view: In both View and DetailView add a title property in the viewDidLoad() method. In detail, it's dynamic. \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}